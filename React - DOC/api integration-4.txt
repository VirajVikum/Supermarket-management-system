users.js


import { Box } from "@mui/material";
import UserForm from "./UserForm";
import UsersTable from "./usersTable";
import Axios from "axios";
import { useEffect, useState } from "react";

// const users=[
//     {
//         id:1,
//         name:'vj',
//     }
//     ,
//     {
//         id:2,
//         name:'vrj',
//     }
// ]

const Users = () => {

    const [users,setusers] = useState([]);
    const [submitted,setSubmitted]=useState(false);
    const [selectedUser,setSelectedUser]=useState({});
    const [isEdit,setIsEdit]=useState(false);



    useEffect(() =>{   //run before all
        getUsers();
    },[]);

    

    const getUsers= () =>{
        setSubmitted(true);

        Axios.get('http://localhost:3001/api/users')  //return a js promise
            .then(Response=>{
                // console.log(Response.data.response);
                setusers(Response.data?.response || []);  // if no data parse empty array
            })
            .catch(error =>{
                console.error("Axios error ", error);
            });
            
    }


    const addUser=(data)=>{
        const payload = {
            id : data.id,
            name : data.name,
        }

        Axios.post('http://localhost:3001/api/createusers',payload)
            .then(()=>{
                // console.log(Response.data.response);
                //setusers(Response.data?.response || []);  // if no data parse empty array
                getUsers();
                setSubmitted(false);
                setIsEdit(false);
            })
            .catch(error =>{
                console.error("Axios error ", error);
            });
    }


    const updateUser=(data)=>{
        const payload = {
            id : data.id,
            name : data.name,
        }

        Axios.post('http://localhost:3001/api/updateusers',payload)
            .then(()=>{
                // console.log(Response.data.response);
                //setusers(Response.data?.response || []);  // if no data parse empty array
                getUsers();
                setSubmitted(false);
                setIsEdit(false);
            })
            .catch(error =>{
                console.error("Axios error ", error);
            });
    }



    const deleteUser =(data)=>{
        

        Axios.post('http://localhost:3001/api/deleteusers',data)
            .then(()=>{
                // console.log(Response.data.response);
                //setusers(Response.data?.response || []);  // if no data parse empty array
                getUsers();
                
            })
            .catch(error =>{
                console.error("Axios error ", error);
            });
    }




    return (
        <Box
        sx={{
            width:'calc(100%-100px)',
            margin:'auto',
            marginTop:'100px'
        }}
        >
            <UserForm 
                addUser={addUser}
                updateUser={updateUser}
                submitted={submitted}
                data={selectedUser}
                isEdit={isEdit}
            />

            <UsersTable 
            rows={users}
            selectedUser={data=>{
                setSelectedUser(data);
                setIsEdit(true);
            }}
            deleteUser={data=>window.confirm("Are you sure ?") && deleteUser(data)}
            />
            
            
        </Box>
    );

}

export default Users;










usertable.js



import { Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from "@mui/material";

const UsersTable = ({ rows, selectedUser,deleteUser }) => {
    return (
        <TableContainer component={Paper}>
            <Table>
                <TableHead>
                    <TableRow>
                        <TableCell>ID</TableCell>
                        <TableCell>Name</TableCell>
                        <TableCell>Actions</TableCell>
                    </TableRow>
                </TableHead>
                <TableBody>
                    {rows.length > 0 ? (
                        rows.map(rows => (
                            <TableRow key={rows.id}>
                                <TableCell component="th" scope="row">{rows.id}</TableCell>
                                <TableCell component="th" scope="row">{rows.name}</TableCell>
                                <TableCell>

                                    <Button 
                                        sx={{
                                            margin: '0px 10px',
                                        }}
                                        onClick={() => selectedUser({id:rows.id,name:rows.name})}
                                    >
                                        Update
                                    </Button>

                                    <Button
                                        sx={{
                                            margin: '0px 10px',
                                        }}
                                        onClick={() => {deleteUser({id:rows.id})}}
                                    >
                                        Delete
                                    </Button>

                                </TableCell>
                            </TableRow>
                        ))
                    ) : (
                        <TableRow>
                            <TableCell component="th" scope="row">No Data</TableCell>
                        </TableRow>
                    )}
                </TableBody>
            </Table>
        </TableContainer>
    );
}

export default UsersTable;






userform.js



import { Button, Grid, Input, Typography } from "@mui/material";
import { useEffect, useState } from "react";

const UserForm = ({addUser,updateUser,submitted,data,isEdit}) =>{

    const [id,setId] = useState(0);//state variabes
    const [name,setName] = useState('0');

    useEffect(()=>{
        if(!submitted)
        {
            setId(0);
            setName("");
        }
    },[submitted])



    useEffect(()=>{
        if(data?.id && data.id !== 0){
            setId(data.id);
            setName(data.name);
        }
    },[data]);




    return (
        <Grid
        container
        spacing={2}
        sx={{//fto include css
            backgroundColor:'#ffff',
            marginBottom:'30px',
            display:'block',
        }}
        >
            {/* To get full screen in mobile view -xs */ }
            
            <Grid item xs={12}> 
            <Typography component={'h1'} sx={{color:'#000000'}}>User Form</Typography>
            </Grid>
            <Grid item xs={12} sm={6} sx={{display:"flex"}}>
                <Typography 
                component={'label'} 
                htmlFor="id"
                sx={{
                    color:'#000000',
                    marginRight:'20px',
                    fontSize:'16px',
                    width:'100px',
                    display:'block',
                }}>
                    ID
                </Typography>
                <Input 
                type="text"
                name="id"
                id="id"
                sx={{width:'400px'}}
                value={id} //state variable
                onChange={e=> setId(e.target.value)}
                />
            </Grid>

            <Grid item xs={12} sm={6} sx={{display:"flex"}}>
                <Typography 
                component={'label'} 
                htmlFor="id"
                sx={{
                    color:'#000000',
                    marginRight:'20px',
                    fontSize:'16px',
                    width:'100px',
                    display:'block',
                }}>
                    Name
                </Typography>
                <Input 
                type="text"
                name="name"
                id="name"
                sx={{width:'400px'}}
                value={name}
                onChange={e=>setName(e.target.value)}
                />
            </Grid>
            <Button
            sx={{
                margin:'auto',
                marginBottom:'20px',
                backgroundColor:'#00c6e6',
                color:'#000000',
                marginLeft:'15px',
                marginTop:'20px',
                "&:hover":{
                    opacity:'0.7',
                    backgroundColor:'#00c6e6',
                }
                


        }}
        // onClick={()=> addUser({id:id,name:name})}
        onClick={()=> isEdit? updateUser({id,name}) : addUser({id,name})}
            >
                {isEdit? "Update" : "Add"}
                </Button>

        </Grid>
    )

}

export default UserForm;