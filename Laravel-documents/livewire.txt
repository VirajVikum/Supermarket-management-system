composer create-project laravel/laravel:^9.0 app-lw

\login-app>composer require livewire/livewire



php artisan livewire:publish --config



php artisan make:model Task -m




public function up(): void
    {
        Schema::create('tasks', function (Blueprint $table) {
            $table->id();
            $table->foreignId('user_id')
                    ->constrained('users')
                    ->cascadeOnDelete();
            $table->string('name');
            $table->timestamps();
        });
    }





php artisan make:seeder UserSeeder




php artisan make:seeder TaskSeeder





class UserSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        User::create([
            'name' => 'vj',
            'email' => 'vj@vj.lk',
            'password' => bcrypt('12345678')
        ]);
    }
}







class TaskSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $tasks=[[
            'user_id' =>1,
            'name' => 'Tasks 1'
        ],
        [
            'user_id' =>1,
            'name' => 'Tasks 2'
        ]
    ];

    foreach($tasks as $task){
        Task::insert($task);
    }

    }
}






class Task extends Model
{
    use HasFactory;

    protected $fillable =[
        'user_id','name'
    ];
}





(Register in dbSeeder)


class DatabaseSeeder extends Seeder
{
    /**
     * Seed the application's database.
     */
    public function run(): void
    {
        $this->call([
            UserSeeder::class,
            TaskSeeder::class
        ]);
    }
}






php artisan migrate




php artisan db:seed





create relationship


class Task extends Model
{
    use HasFactory;

    protected $fillable =[
        'user_id','name'
    ];

    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class); 
    }
}






php artisan livewire:publish --config







COMPONENT CREATE

C:\xampp\htdocs\app-lw>php artisan livewire:make tasks.TaskCreate    //create 2 folders in(app--->Livewire/Tasks , views--->livewire/tasks)









in(views/layouts/app.bade.php)

($slot use instead of @yield)





    />
    <title>
        {{ $title ?? 'VRJ Livewire' }}
    </title>
    <link
        rel="stylesheet"
        href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css"
    />
    <link
        href="https://fonts.bunny.net/css2?family=Nunito:wght@400;600;700&display=swap"
        rel="stylesheet"
    />
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-neutral-800">
<div class="relative h-full isolate overflow-hidden  px-6 lg:px-8">
    <header>
        @include('layouts.nav')
    </header>
    <div class="relative isolate pt-24 sm:pt-32">
        <div class="mx-auto">
            @yield('content')
            @isset($slot)
                {{ $slot }}
            @endisset
        </div>
 






change path in(config/livewire.php)


'layout' => 'components.layouts.app',


OR (app/livewire/TaskCreate.php)




class TaskCreate extends Component
{

    #[Layout(('layouts.app'))]

    public function render()
    {
        return view('livewire.tasks.task-create')
            ->title('Tasks of VRJ Livewire');
    }
}








php artisan livewire:make tasks.TaskIndex

//create 2 files in(app--->Livewire/Tasks , views--->livewire/tasks)



Route::get('/tasks', TaskIndex::class)->name('tasks');






















































44.00--->


php artisan livewire:make Tasks/TaskShow



Route::get('/tasks/{id}', TaskShow::class);




class TaskShow extends Component
{
    public Task $task;

    public function mount($id)
    {
        $this->task=Task::findOrFail($id);
    }





in(views/livewire/tasks/task-show.blade.php)

<div>
<h1 class="font-bold tracking-tight text-white sm:text-6xl text-center">
{{ Stask->name }}
</h1>
</div>








binding---->(change above things)



Route::get('/tasks/{task}', TaskShow::class);



class TaskShow extends Component
{
    public Task $task;

    public function mount(Task $task)
    {
        $this->task=$task;
    }





(task-index.blade.php) to count length

<input
    type "text"
    class="rounded-nd w-1/5 border- py-2 text-gray-900 placeholder:text-gray-400 sm:text-sm sm:leading-6"
    wire:model='name'
    />
    <span class="absolute -ml-6 mt-2">
        <span x-text="$wire.name.length">

        </span>
    </span>
    <div class="text-center pb-10">
        <x-button :button="$button" />
    </div>










(in components/button.blade.php)

<button class="rounded-md bg-pink-600 px-4 py-3 text-sm font-semibold text-white shadow-md hover:bg-pink-500" 
type='submit'
wire:click="{{$click}}">
        {{$button}}
        </button>






in(task-index.blade.php)

<input
    type "text"
    class="rounded-nd w-1/5 border- py-2 text-gray-900 placeholder:text-gray-400 sm:text-sm sm:leading-6"
    wire:model='name'
    />
    <span class="absolute -ml-6 mt-2">
        <span x-text="$wire.name.length">

        </span>
    </span>
    <div class="text-center pb-10">
        <x-button button="{{ $button }}" click="save" />
    </div>





(in TaskIndex.php)


public function save()
    {
        // dd($this->name);
        Task::create([
            'user_id'=>1,
            'name'=>this->name
        ]);
        return $this->redirect(route('tasks'));
    }






Route::get('/tasks', TaskIndex::class)->name('tasks');




validate text field--->


#[Rule('required|max:10')]
    public $name;

    public function mount()
    {
        $this->tasks=Task::with('user')->get();
    }

    public function save()
    {
        // dd($this->name);

        $this->validate();
        
        Task::create([
            'user_id'=>1,
            'name'=>$this->name
        ]);
        return $this->redirect(route('tasks'));
    }







 <div class="text-center pb-10">
        <!-- <x-button :button="$button" :click= "'save'" /> -->
        <x-button button="{{ $button }}" click="save" />

    </div>
    <div class="text-red-500">
        @error('name')
        <span>{{$message}}</span>
        @enderror
    </div>








show error without clicking------>(.live)  [.blur ...]

<input
    type="text"
    class="rounded-nd w-1/5 border- py-2 text-gray-900 placeholder:text-gray-400 sm:text-sm sm:leading-6"
    wire:model.live='name'
    />
    
    <div class="text-center pb-10">
        <!-- <x-button :button="$button" :click= "'save'" /> -->
        <x-button button="{{ $button }}" click="save" />

    </div>
    <div class="text-red-500">
        @error('name')
        <span>{{$message}}</span>
        @enderror
    </div>




add spinner using flowbite

add new component file as(spinnner.blade.php)



add to button

<button class="rounded-md bg-pink-600 px-4 py-3 text-sm font-semibold text-white shadow-md hover:bg-pink-500" 
type='submit'
wire:click="{{ $click }}">
        {{$button}}
</button>

<div>
    <x- spinner />
</div>





confirm alert


<button class="rounded-md bg-pink-600 px-4 py-3 text-sm font-semibold text-white shadow-md hover:bg-pink-500" 
type='submit'
wire:click="{{ $click }}"
wire:confirm="Are you sure want add this task ?"
>
        {{$button}}
</button>

<div wire:loading>
    <x-spinner />
</div>





add task by hitting Enter

<div class="text-center pb-10">
<input
    type="text"
    class="rounded-nd w-1/5 border- py-2 text-gray-900 placeholder:text-gray-400 sm:text-sm sm:leading-6"
    wire:model.live='name'
    wire:keydown.enter="save"
    wire.keyup="save" // when preess any key
    wire.keyup.0="save" // when preess 0 key
    wire.mouseenter="save" // when mouse hover on txtbox
    />
    
    <div class="text-center pb-10">
        <!-- <x-button :button="$button" :click= "'save'" /> -->
        <x-button button="{{ $button }}" click="save" />

    </div>
    <div class="text-red-500">
        @error('name')
        <span>{{$message}}</span>
        @enderror
    </div>






Show success message



public function save()
    {
        // dd($this->name);

        $this->validate();

        Task::create([
            'user_id'=>1,
            'name'=>$this->name
        ]);

        session()->flash('message','task created successfully');

        return $this->redirect(route('tasks'));
    }




create alert.bade.php in components


<div>
    @if(session()->has('message'))
    <div class="p-4 mb-4 text-sm  w-2/6 mx-auto text-green-800 rounded-lg bg-green-50">
        <span class="font-medium">
            success message
        </span>
        {{session('message')}}
    </div>
    @endif
</div>






call component in task-index.blade.php


<div class="text-center pb-10">
    <x-alert />
<input
    type="text"
    class="rounded-nd w-1/5 border- py-2 text-gray-900 placeholder:text-gray-400 sm:text-sm sm:leading-6"
    wire:model.live='name'
  
    
    />
    
    <div class="text-center pb-10">
        <!-- <x-button :button="$button" :click= "'save'" /> -->
        <x-button button="{{ $button }}" click="save" />

    </div>







Events



public function save()
    {
        // dd($this->name);

        $this->validate();

        Task::create([
            'user_id'=>1,
            'name'=>$this->name
        ]);

        session()->flash('message','task created successfully');

        $this->dispatch('task updated');

        return $this->redirect(route('tasks'));
    }







php artisan livewire:make Tasks/TaskUpdate




class TaskUpdate extends Component
{
    #[On('task-updated')]

    public function updateTimestamp()
    {
        Task::query()->update([
            'updated_at'=> now()
        ]);
    }


    public function render()
    {
        return view('livewire.tasks.task-update');
    }
}






in task-item.blade.php


<div class="rounded-ad bg-pink-50 p-4 -4/5 sm:w-2/5 mx-auto mb-4" wire:key="{{$task->id}}">
    <div class="flex">
        <div class="ml-mt-1 flex-1 md:flex md:justify-between">
            <p class="text-sm font-bold text-pink-700">
                {{$task->name}} / {{Carbon\Carbon::parse($task->updated_at)->format('d-m-Y H:i')}}
            </p>







in task-update.blade.php


<div class="text-center">
    <button
    wire:click="updateTimestamp"
    type="submit"
    class="whitespace-nowrap font-medium text-pink-700 hover-text-pink-600">
       Refresh me
    </button>
</div>






Route::get('/tasks/update', TaskUpdate::class);







HOOKS



in TaskIndex.php



public function hydrate() //run before every sub requests
    {
        dd("OK");
    }



public function boot()  //run before begin others
    {
        $this->tasks=Task::with('user')->get();
    }


public function updating()
    {
        //run before data update
    }



 public function updated()
    {
        //run after data update
    }




public function rendering($view,$data) //calls before render
    {
        $data['name']='VJ';
        dd($data);
    }



public function rendered($view,$html) //calls after render
    {
        
        dd($html);
    }



public function dehydrate() //calls after every component requests
    {
        
        $this->tasks=$this->tasks->toArray();
        dd($this->tasks);
    }