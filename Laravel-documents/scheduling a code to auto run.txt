C:\xampp\htdocs\dialer-admin-console>php artisan make:job CheckAvailableTimeJob





<?php

namespace App\Jobs;

use App\Models\ad_campaign;
use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;
use Illuminate\Foundation\Bus\Dispatchable;
use Illuminate\Queue\InteractsWithQueue;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Log;

class CheckAvailableTimeJob implements ShouldQueue
{
    use Dispatchable, InteractsWithQueue, Queueable, SerializesModels;

    /**
     * Create a new job instance.
     */
    public function __construct()
    {
        //
    }

    /**
     * Execute the job.
     */
    public function handle(): void
    {
        $now = now()->format('Y-m-d H:i'); 
        Log::info('Received time: ' . $now);

    
    $campaigns = ad_campaign::where('next_available_at', '<=', $now)
                            ->where('last_call_status', '2')
                            ->get();

    foreach ($campaigns as $campaign) {
        
        $campaign->status = 2;
        $campaign->save();
    }
    }
}















app/Console/Kernel.php



<?php

namespace App\Console;

use App\Jobs\CheckAvailableTimeJob;
use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;

class Kernel extends ConsoleKernel
{
    /**
     * Define the application's command schedule.
     */
    protected function schedule(Schedule $schedule): void
    {
        // $schedule->command('inspire')->hourly();


        $schedule->job(new CheckAvailableTimeJob)->everyMinute();           //code




    }

    /**
     * Register the commands for the application.
     */
    protected function commands(): void
    {
        $this->load(__DIR__.'/Commands');

        require base_path('routes/console.php');
    }
}

















//This runs only one time 

C:\xampp\htdocs\dialer-admin-console> php artisan schedule:run





















set to run repeatly in windows   // cronjobs in linux



XAMPP on Windows, the crontab command is not available, as it's specific to Unix-based systems (like Linux and macOS). On Windows, you can use the Task Scheduler to achieve the same result as a cron job.

Here's how you can set up a scheduled task in Windows to run the Laravel scheduler:

Step-by-Step Guide to Setting Up a Scheduled Task on Windows
Open Task Scheduler:

Press Windows + R to open the Run dialog. (Search Task Schedular )
Type taskschd.msc and press Enter. This will open the Task Scheduler.
Create a New Task:

In the Task Scheduler, click on "Create Task..." from the right-hand Actions pane.
General Settings:

In the General tab, name your task (e.g., Laravel Scheduler).
Set the task to run with the highest privileges by checking "Run with highest privileges."
Choose "Configure for:" and select your Windows version.
Trigger:






Go to the Triggers tab and click "New...".  // if want auto run




Set the task to begin "On a schedule".
Set the schedule to run Daily and repeat the task every 1 minute for the duration of 1 day.
Click OK to save the trigger.

when want to stop disable it




Trigger Tab:

Do not add any triggers. This way, the task will only run when you manually start it.




Action:

Go to the Actions tab and click "New...".
In Action, choose "Start a program."
In the Program/script field, enter the path to your php.exe file. For XAMPP, itâ€™s usually something like:

C:\xampp\php\php.exe


In the Add arguments (optional) field, enter the command to run the Laravel scheduler:

artisan schedule:run

In the Start in (optional) field, enter the path to your Laravel project (without a trailing backslash). For example:

C:\xampp\htdocs\dialer-admin-console

Click OK to save.




Conditions and Settings:

In the Conditions tab, you can uncheck "Start the task only if the computer is on AC power" if you want it to run on battery as well.
In the Settings tab, ensure that "Allow task to be run on demand" is checked.
You can also check "If the task fails, restart every" and set it to restart after 1 minute, with attempts as needed.
Finish and Test:

Click OK to create the task.
You can manually run the task to ensure it works by right-clicking on it in the Task Scheduler library and selecting Run.







